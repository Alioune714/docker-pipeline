pipeline {
    agent any
    environment {
        IMAGE_NAME = "python-sum"
        DIR_PATH = DIR_PATH = "C:\\Users\\aliou\\OneDrive\\Bureau\\Jenkins\\app\\Dockerfile"
        CONTAINER_ID = "sha256:f4bfbca782c4ac0291e9fd559ecbf07debd080f4d35b3089bf6121e5742b9ef0"
        TEST_FILE_PATH = "C:\\Users\\aliou\\OneDrive\\Bureau\\\Jenkins\\app\\Jenkin\\test_variables.txt"
    }
    stages {
        stage('Build') {
            steps {
                script {
                    echo "üî® Construction de l‚Äôimage Docker..."
                    bat "docker build -t ${IMAGE_NAME} ${DIR_PATH}"  // Remplac√© "sh" par "bat"
                    echo "‚úÖ Image Docker ${IMAGE_NAME} construite avec succ√®s !"
                }
            }
        }
        stage('Run') {
            steps {
                script {
                    echo "üöÄ D√©marrage du conteneur..."
                    def output = bat(script: "docker run -dit ${IMAGE_NAME}", returnStdout: true).trim()  // Remplac√© "sh" par "bat"
                    def lines = output.split('\n')
                    env.CONTAINER_ID = lines[-1].trim()
                    echo "‚úÖ Conteneur en cours d‚Äôex√©cution avec ID : ${env.CONTAINER_ID}"
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    echo "üß™ Lancement des tests..."
                    def testLines = readFile("${TEST_FILE_PATH}").split('\n')
                    testLines.each { line ->
                        def vars = line.split(' ')
                        def arg1 = vars[0]
                        def arg2 = vars[1]
                        def expectedSum = vars[2].toFloat()
                        def output = bat(script: "docker exec ${CONTAINER_ID} python /app/sum.py ${arg1} ${arg2}", returnStdout: true).trim()
                        def result = output.toFloat()
                        if (result == expectedSum) {
                            echo "‚úÖ Test r√©ussi pour les nombres ${arg1} et ${arg2}. R√©sultat attendu : ${expectedSum}, obtenu : ${result}"
                        } else {
                            error "‚ùå Test √©chou√© pour les nombres ${arg1} et ${arg2}. R√©sultat attendu : ${expectedSum}, obtenu : ${result}"
                        }
                    }
                }
            }
        stage('Deploy') {
            steps {
                script {
                    echo "üîê Connexion √† DockerHub..."
                    sh 'echo ${DOCKER_HUB_PASSWORD} | docker login -u ${DOCKER_HUB_USERNAME} --password-stdin'

                    echo "üè∑Ô∏è Tagging de l‚Äôimage..."
                    sh 'docker tag ${python-sum}:${DOCKER_TAG} ${DOCKER_HUB_REPO}:${DOCKER_TAG}'

                    echo "üì§ Pouss√©e de l‚Äôimage vers DockerHub..."
                    sh 'docker push ${DOCKER_HUB_REPO}:${DOCKER_TAG}'
                }
            }
        }    
    
    }
}
